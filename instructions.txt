
##First create a test Cluster... Change the ssh key configuration, and the ip addresses in the file accordingly.
k0sctl apply --config cluster_creation/cluster_config.yaml --no-wait 
k0sctl kubeconfig --config cluster_creation/cluster_config.yaml > k0s_13_14_15_kubeconfig
cp k0s_13_14_15_kubeconfig ~/.kube/config
cilium install --version 1.16.1 --values cluster_creation/cilium_values.yaml 
cilium status --wait
kubectl apply -f cluster_creation/ingresscontroller.yaml

##Then create an admin ServiceAccount
kubectl apply -f admin-sa_creation/admin_sa_rolebinding.yaml 
kubectl apply -f admin-sa_createion/admin_sa_token_secret.yaml 

#Helm deploy openebs storageclass
helm upgrade --install openebs openebs/openebs --namespace openebs --create-namespace
kubectl patch storageclass openebs-hostpath -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

##Applying Metrics API in a cluster... wait a while.. most likely needed for pod metrics
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

##Applying kube-state-metrics for detecting Kube States.. most likely needed for pod phases
kubectl apply -f https://raw.githubusercontent.com/kubernetes/kube-state-metrics/master/examples/standard/deployment.yaml

##Use this to add custom created service account name here... in this case it is admin-sa
kubectl patch deployment kube-state-metrics -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/serviceAccountName", "value": "admin-sa"}]'
kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/serviceAccountName", "value": "admin-sa"}]'

kubectl create namespace ag1


kubectl apply -f mssql_manifest_files/operator.yaml -n ag1


kubectl create secret generic sql-secrets \
  --from-literal=sapassword="Passw0rd1" \
  --from-literal=masterkeypassword="Passw0rd1" \
  --namespace ag1
  
/opt/mssql-tools/bin/sqlcmd -S mssql-sql-statefull-deploy.mssql.svc.cluster.local -U sa -P Passw0rd1

/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "Passw0rd1" -C

kubectl cp mssql/mssql-sql-statefull-deploy-0:/var/opt/mssql/data/TestDB_Backup.bak ./TestDB_Backup.bak
kubectl cp ./TestDB_Backup.bak mssql/mssql-sql-statefull-deploy-0:/var/opt/mssql/data/TestDB_Backup.bak

/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P 'Passw0rd1' -Q "RESTORE DATABASE music FROM DISK = '/var/opt/mssql/data/TestDB_Backup.bak' WITH REPLACE" -C


#Install mssql and connect it to sqlpad... THEN

BACK UP AND RESTORE PROCESS
....
CREATE DATABASE TestDB;

CREATE TABLE TestDB.dbo.TestTable (
    ID INT PRIMARY KEY,
    Name NVARCHAR(100)
);

SELECT * FROM TestDB.INFORMATION_SCHEMA.TABLES;

INSERT INTO TestDB.dbo.TestTable (id, name, age)  
VALUES  
    (1, 'Alice'),  
    (2, 'Bob'),  
    (3, 'Charlie');

SELECT * FROM TestDB.dbo.TestTable;


BACKUP DATABASE TestDB  
TO DISK = '/var/opt/mssql/data/TestDB_Backup.bak'  
WITH FORMAT, INIT, COMPRESSION, STATS = 10;


kubectl cp mssql/mssql-sql-statefull-deploy-0:/var/opt/mssql/data/TestDB_Backup.bak ./TestDB_Backup.bak

helm uninstall mssql -n mssql
#delete pvc

helm install mssql . -n mssql

kubectl cp ./abbldev_11_2_2025.bak abbl-qa/mssql-sql-stateful-deploy-0:/var/opt/mssql/data/abbldev_11_2_2025.bak

RESTORE DATABASE TestDB  
FROM DISK = '/var/opt/mssql/data/TestDB_Backup.bak'  
WITH MOVE 'TestDB' TO '/var/opt/mssql/data/TestDB.mdf',  
MOVE 'TestDB_log' TO '/var/opt/mssql/data/TestDB.ldf',  
REPLACE, RECOVERY, STATS = 10;

SELECT * FROM TestDB.dbo.TestTable;




---
ON ALL
USE master;
CREATE ENDPOINT Hadr_endpoint
STATE = STARTED
AS TCP (LISTENER_PORT = 5022)
FOR DATA_MIRRORING (ROLE = ALL, AUTHENTICATION = WINDOWS NEGOTIATE, ENCRYPTION = REQUIRED ALGORITHM AES);

GRANT CONNECT ON ENDPOINT::[Hadr_endpoint] TO [sa];

CREATE LOGIN ag_replica WITH PASSWORD = 'Passw0rd1';
GRANT CONNECT ON ENDPOINT::[Hadr_endpoint] TO [ag_replica];

SELECT name, protocol_desc, state_desc, type_desc 
FROM sys.endpoints WHERE type_desc = 'DATABASE_MIRRORING';

ON PRIMARY
CREATE AVAILABILITY GROUP AG
WITH (CLUSTER_TYPE = NONE)
FOR DATABASE TestDB
REPLICA ON
    N'mssql-sql-statefull-deploy-0'
        WITH (ENDPOINT_URL = 'TCP://mssql-sql-statefull-deploy-0.mssql-sql-statefull-deploy.mssql.svc.cluster.local:5022',
              AVAILABILITY_MODE = SYNCHRONOUS_COMMIT, 
              FAILOVER_MODE = MANUAL),
    N'mssql-sql-statefull-deploy-1'
        WITH (ENDPOINT_URL = 'TCP://mssql-sql-statefull-deploy-1.mssql-sql-statefull-deploy.mssql.svc.cluster.local:5022',
              AVAILABILITY_MODE = SYNCHRONOUS_COMMIT, 
              FAILOVER_MODE = MANUAL),
    N'mssql-sql-statefull-deploy-2'
        WITH (ENDPOINT_URL = 'TCP://mssql-sql-statefull-deploy-2.mssql-sql-statefull-deploy.mssql.svc.cluster.local:5022',
              AVAILABILITY_MODE = SYNCHRONOUS_COMMIT, 
              FAILOVER_MODE = MANUAL);

ON SECONDARY
ALTER AVAILABILITY GROUP AG JOIN WITH (CLUSTER_TYPE = NONE);
GO












DECLARE @name VARCHAR(255)
DECLARE @fileName VARCHAR(255)

DECLARE db_cursor CURSOR FOR 
SELECT name 
FROM sys.databases 
WHERE state_desc = 'ONLINE' AND name NOT IN ('master', 'model', 'msdb', 'tempdb')

OPEN db_cursor  
FETCH NEXT FROM db_cursor INTO @name  

WHILE @@FETCH_STATUS = 0  
BEGIN  
    SET @fileName = '/var/opt/mssql/' + @name + '_backup_' + CONVERT(VARCHAR(20), GETDATE(), 112) + '.bak'
    EXEC('BACKUP DATABASE [' + @name + '] TO DISK = ''' + @fileName + '''')

    FETCH NEXT FROM db_cursor INTO @name  
END  

CLOSE db_cursor  
DEALLOCATE db_cursor





BACKUP DATABASE abbldev 
TO DISK = 'C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Backup\abbldev_11_2_2025.bak' 
WITH FORMAT,  
MEDIANAME = 'SQLServerBackups',  
NAME = 'Full Backup of abbldev';