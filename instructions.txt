
##First create a test Cluster... Change the ssh key configuration, and the ip addresses in the file accordingly.
k0sctl apply --config cluster_creation/cluster_config.yaml --no-wait 
k0sctl kubeconfig --config cluster_creation/cluster_config.yaml > k0s_13_14_15_kubeconfig
cp k0s_13_14_15_kubeconfig ~/.kube/config
cilium install --version 1.16.1 --values cluster_creation/cilium_values.yaml 
cilium status --wait
kubectl apply -f cluster_creation/ingresscontroller.yaml

##Then create an admin ServiceAccount
kubectl apply -f admin-sa_creation/admin_sa_rolebinding.yaml 
kubectl apply -f admin-sa_createion/admin_sa_token_secret.yaml 

#Helm deploy openebs storageclass
helm upgrade --install openebs openebs/openebs --namespace openebs --create-namespace
kubectl patch storageclass openebs-hostpath -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

##Applying Metrics API in a cluster... wait a while.. most likely needed for pod metrics
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

##Applying kube-state-metrics for detecting Kube States.. most likely needed for pod phases
kubectl apply -f https://raw.githubusercontent.com/kubernetes/kube-state-metrics/master/examples/standard/deployment.yaml

##Use this to add custom created service account name here... in this case it is admin-sa
kubectl patch deployment kube-state-metrics -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/serviceAccountName", "value": "admin-sa"}]'
kubectl patch deployment metrics-server -n kube-system --type='json' -p='[{"op": "add", "path": "/spec/template/spec/serviceAccountName", "value": "admin-sa"}]'

kubectl create namespace ag1


kubectl apply -f mssql_manifest_files/operator.yaml -n ag1


kubectl create secret generic sql-secrets \
  --from-literal=sapassword="Passw0rd1" \
  --from-literal=masterkeypassword="Passw0rd1" \
  --namespace ag1